/* Auto-generated by genmsg_cpp for file /opt/rce/packages/workspace/navfn_openmp/srv/SetCostmap.srv */
#ifndef NAVFN_OPENMP_SERVICE_SETCOSTMAP_H
#define NAVFN_OPENMP_SERVICE_SETCOSTMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace navfn_openmp
{
template <class ContainerAllocator>
struct SetCostmapRequest_ {
  typedef SetCostmapRequest_<ContainerAllocator> Type;

  SetCostmapRequest_()
  : costs()
  , height(0)
  , width(0)
  {
  }

  SetCostmapRequest_(const ContainerAllocator& _alloc)
  : costs(_alloc)
  , height(0)
  , width(0)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _costs_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  costs;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef uint16_t _width_type;
  uint16_t width;


  typedef boost::shared_ptr< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCostmapRequest
typedef  ::navfn_openmp::SetCostmapRequest_<std::allocator<void> > SetCostmapRequest;

typedef boost::shared_ptr< ::navfn_openmp::SetCostmapRequest> SetCostmapRequestPtr;
typedef boost::shared_ptr< ::navfn_openmp::SetCostmapRequest const> SetCostmapRequestConstPtr;



template <class ContainerAllocator>
struct SetCostmapResponse_ {
  typedef SetCostmapResponse_<ContainerAllocator> Type;

  SetCostmapResponse_()
  {
  }

  SetCostmapResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCostmapResponse
typedef  ::navfn_openmp::SetCostmapResponse_<std::allocator<void> > SetCostmapResponse;

typedef boost::shared_ptr< ::navfn_openmp::SetCostmapResponse> SetCostmapResponsePtr;
typedef boost::shared_ptr< ::navfn_openmp::SetCostmapResponse const> SetCostmapResponseConstPtr;


struct SetCostmap
{

typedef SetCostmapRequest Request;
typedef SetCostmapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetCostmap
} // namespace navfn_openmp

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x370ec969cdb71f9cULL;
  static const uint64_t static_value2 = 0xde7c7cbe0d752308ULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/SetCostmapRequest";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8[] costs\n\
uint16 height\n\
uint16 width\n\
\n\
";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/SetCostmapResponse";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn_openmp::SetCostmapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.costs);
    stream.next(m.height);
    stream.next(m.width);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCostmapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn_openmp::SetCostmapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCostmapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<navfn_openmp::SetCostmap> {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn_openmp::SetCostmap&) { return value(); } 
};

template<>
struct DataType<navfn_openmp::SetCostmap> {
  static const char* value() 
  {
    return "navfn_openmp/SetCostmap";
  }

  static const char* value(const navfn_openmp::SetCostmap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn_openmp::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn_openmp::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn_openmp::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/SetCostmap";
  }

  static const char* value(const navfn_openmp::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn_openmp::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn_openmp::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn_openmp::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/SetCostmap";
  }

  static const char* value(const navfn_openmp::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAVFN_OPENMP_SERVICE_SETCOSTMAP_H

