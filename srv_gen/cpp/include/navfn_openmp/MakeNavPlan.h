/* Auto-generated by genmsg_cpp for file /opt/rce/packages/workspace/navfn_openmp/srv/MakeNavPlan.srv */
#ifndef NAVFN_OPENMP_SERVICE_MAKENAVPLAN_H
#define NAVFN_OPENMP_SERVICE_MAKENAVPLAN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/PoseStamped.h"


#include "geometry_msgs/PoseStamped.h"

namespace navfn_openmp
{
template <class ContainerAllocator>
struct MakeNavPlanRequest_ {
  typedef MakeNavPlanRequest_<ContainerAllocator> Type;

  MakeNavPlanRequest_()
  : start()
  , goal()
  {
  }

  MakeNavPlanRequest_(const ContainerAllocator& _alloc)
  : start(_alloc)
  , goal(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  start;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  goal;


  typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MakeNavPlanRequest
typedef  ::navfn_openmp::MakeNavPlanRequest_<std::allocator<void> > MakeNavPlanRequest;

typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanRequest> MakeNavPlanRequestPtr;
typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanRequest const> MakeNavPlanRequestConstPtr;



template <class ContainerAllocator>
struct MakeNavPlanResponse_ {
  typedef MakeNavPlanResponse_<ContainerAllocator> Type;

  MakeNavPlanResponse_()
  : plan_found(0)
  , error_message()
  , path()
  {
  }

  MakeNavPlanResponse_(const ContainerAllocator& _alloc)
  : plan_found(0)
  , error_message(_alloc)
  , path(_alloc)
  {
  }

  typedef uint8_t _plan_found_type;
  uint8_t plan_found;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  error_message;

  typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _path_type;
  std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  path;


  typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MakeNavPlanResponse
typedef  ::navfn_openmp::MakeNavPlanResponse_<std::allocator<void> > MakeNavPlanResponse;

typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanResponse> MakeNavPlanResponsePtr;
typedef boost::shared_ptr< ::navfn_openmp::MakeNavPlanResponse const> MakeNavPlanResponseConstPtr;


struct MakeNavPlan
{

typedef MakeNavPlanRequest Request;
typedef MakeNavPlanResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MakeNavPlan
} // namespace navfn_openmp

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2fe3126bd5b2d56edd5005220333d4fd";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2fe3126bd5b2d56eULL;
  static const uint64_t static_value2 = 0xdd5005220333d4fdULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/MakeNavPlanRequest";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped start\n\
geometry_msgs/PoseStamped goal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b8ed7edf1b237dc9ddda8c8ffed5d3a";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b8ed7edf1b237dcULL;
  static const uint64_t static_value2 = 0x9ddda8c8ffed5d3aULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/MakeNavPlanResponse";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 plan_found\n\
string error_message\n\
\n\
\n\
geometry_msgs/PoseStamped[] path\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start);
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MakeNavPlanRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.plan_found);
    stream.next(m.error_message);
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MakeNavPlanResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<navfn_openmp::MakeNavPlan> {
  static const char* value() 
  {
    return "8ffef29bc8b086289124c16a8daa989d";
  }

  static const char* value(const navfn_openmp::MakeNavPlan&) { return value(); } 
};

template<>
struct DataType<navfn_openmp::MakeNavPlan> {
  static const char* value() 
  {
    return "navfn_openmp/MakeNavPlan";
  }

  static const char* value(const navfn_openmp::MakeNavPlan&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8ffef29bc8b086289124c16a8daa989d";
  }

  static const char* value(const navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/MakeNavPlan";
  }

  static const char* value(const navfn_openmp::MakeNavPlanRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8ffef29bc8b086289124c16a8daa989d";
  }

  static const char* value(const navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn_openmp/MakeNavPlan";
  }

  static const char* value(const navfn_openmp::MakeNavPlanResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAVFN_OPENMP_SERVICE_MAKENAVPLAN_H

